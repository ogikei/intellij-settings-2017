<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="/start_script.py" timestamp="1562223460105">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" timestamp="1563000140242">
        <mark key="'" line="7" column="1" />
        <mark key="[" line="30" column="0" />
        <mark key="]" line="30" column="3" />
        <mark key="." line="30" column="3" />
        <mark key="^" line="30" column="3" />
      </file>
      <file name="/Dummy.scala" timestamp="1562821158359">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" timestamp="1563184149734">
        <mark key="[" line="6" column="6" />
        <mark key="]" line="6" column="7" />
        <mark key="." line="6" column="7" />
        <mark key="^" line="6" column="7" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/.gitignore" timestamp="1562231253211">
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/untitled.sc" timestamp="1562131308152">
        <mark key="'" line="43" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="44" column="0" />
        <mark key="^" line="44" column="0" />
        <mark key="." line="44" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/resources/README.md" timestamp="1562230831173">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" timestamp="1563186479603">
        <mark key="[" line="10" column="0" />
        <mark key="]" line="12" column="0" />
        <mark key="." line="12" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="43" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/untitled.sc" />
      <jump line="10" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="117" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="8" column="42" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="127" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="2" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="12" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="5" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="66" column="30" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="1" column="1" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="12" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="14" column="16" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="49" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="11" column="2" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="13" column="36" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="6" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="0" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="3" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="28" column="22" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="27" column="22" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="16" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="17" column="57" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="10" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="126" column="66" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="8" column="6" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="162" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="120" column="15" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="116" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="110" column="11" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="0" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="32" column="31" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="18" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="2" column="23" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="24" column="11" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="20" column="50" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="22" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="23" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="6" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="3" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="26" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="7" column="1" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="26" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="37" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="31" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="24" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="30" column="24" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="9" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="5" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="29" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="25" column="38" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="7" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="15" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="25" column="2" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="38" column="12" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="228" column="23" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="113" column="19" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="5" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="4" column="93" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="11" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="14" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="209" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="97" column="14" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="98" column="12" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="180" column="4" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="196" column="10" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="197" column="23" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="29" column="6" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="104" column="23" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="208" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="12" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
    </jumps>
    <registers>
      <register name="&quot;" type="2">
        <text encoding="base64">UGVyc29uCg==</text>
      </register>
      <register name="-" type="4">
        <text>)</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxoaXRDb3VudGVyXD4=</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">Y2FzZSBjbGFzcyBQZXJzb24obmFtZTogU3RyaW5nLCBhZ2U6IExvbmcpCg==</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">UGVyc29uCg==</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="3" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">ICAgID8/Pwo=</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">77u/cGFja2FnZSBjb20uc3VuZG9nc29mdHdhcmUuc3BhcmsK</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64">ICAuZW5hYmxlSGl2ZVN1cHBvcnQoKQo=</text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">ICAuY29uZmlnKCJzcGFyay5zcWwud2FyZWhvdXNlLmRpciIpCg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">Y2FzZSBjbGFzcyBQZXJzb24xKG5hbWU6IFN0cmluZywgYWdlOiBMb25nKQoKdmFsIGNhc2VDbGFzc0RTID0gc2MucGFyYWxsZWxpemUoU2VxKFBlcnNvbigia2Vpc3VrZSIsIDEyKSkpLmFzW1BlcnNvbjFdCmNhc2VDbGFzc0RTLnNob3coKQoKLS1zcGFyay5leGVjdXRvci5tZW1vcnkgNVlHCg==</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">Y2FzZSBjbGFzcyBQZXJzb24obmFtZTogU3RyaW5nLCBhZ2U6IExvbmcpCg==</text>
      </register>
      <register name=":" type="4">
        <text>%d</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxoaXRDb3VudGVyXD4=</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxoaXRDb3VudGVyXD4=</last-pattern>
      <last-replace />
      <last-substitute encoding="base64">c2NhbGE+</last-substitute>
      <last-dir>1</last-dir>
      <show-last>true</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">c2NhbGE+</entry>
        <entry encoding="base64">XDxzdHJcPg==</entry>
        <entry encoding="base64">XDxwZW9wbGVERjFcPg==</entry>
        <entry encoding="base64">XDxjYXNlQ2xhc3NEU1w+</entry>
        <entry encoding="base64">XDxoaXRDb3VudGVyXD4=</entry>
      </history-search>
      <history-cmd>
        <entry>w</entry>
        <entry encoding="base64">JXMvc2NhbGE+Ly9n</entry>
        <entry>%d</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>