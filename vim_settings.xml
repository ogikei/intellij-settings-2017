<application>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="/start_script.py" timestamp="1562223460105">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" timestamp="1563000140242">
        <mark key="'" line="7" column="1" />
        <mark key="[" line="30" column="0" />
        <mark key="]" line="30" column="3" />
        <mark key="." line="30" column="3" />
        <mark key="^" line="30" column="3" />
      </file>
      <file name="/Dummy.scala" timestamp="1562821158359">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" timestamp="1563088797184">
        <mark key="'" line="4" column="0" />
        <mark key="[" line="1" column="59" />
        <mark key="]" line="1" column="67" />
        <mark key="." line="1" column="67" />
        <mark key="^" line="1" column="67" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/.gitignore" timestamp="1562231253211">
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="0" />
        <mark key="." line="2" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/untitled.sc" timestamp="1562131308152">
        <mark key="'" line="43" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="44" column="0" />
        <mark key="^" line="44" column="0" />
        <mark key="." line="44" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/resources/README.md" timestamp="1562230831173">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" timestamp="1563093487173">
        <mark key="'" line="26" column="19" />
        <mark key="[" line="17" column="55" />
        <mark key="]" line="17" column="68" />
        <mark key="." line="17" column="68" />
        <mark key="^" line="17" column="68" />
      </file>
    </filemarks>
    <jumps>
      <jump line="43" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/untitled.sc" />
      <jump line="10" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="117" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="8" column="42" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="127" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="2" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="12" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="5" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="66" column="30" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="98" column="4" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="1" column="1" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="12" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="14" column="16" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="49" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="11" column="2" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="13" column="36" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="6" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="0" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="3" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="28" column="22" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="27" column="22" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="16" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="17" column="57" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="10" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="126" column="66" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="8" column="6" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="162" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="120" column="15" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="116" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="110" column="11" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="0" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="32" column="31" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="18" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="2" column="23" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="24" column="11" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="20" column="50" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="22" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="23" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="29" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="6" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="3" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="26" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="7" column="1" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/Anki.scala" />
      <jump line="26" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="37" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="31" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="24" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="30" column="24" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="9" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="5" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="29" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="25" column="38" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="4" column="71" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="7" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test.sc" />
      <jump line="15" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="25" column="2" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="38" column="12" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="228" column="23" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="113" column="19" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="5" column="0" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
      <jump line="11" column="19" filename="$USER_HOME$/MyWork/git/AnkiScala/src/main/scala/test_rdd.sc" />
    </jumps>
    <registers>
      <register name="&quot;" type="4">
        <text>size</text>
      </register>
      <register name="-" type="4">
        <text>size</text>
      </register>
      <register name="/" type="4">
        <text encoding="base64">XDxwZW9wbGVERjFcPg==</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">TWFwKDEgLT4gMiwgMyAtPiA0LCA1IC0+IDYpLm1hcCh2MSA9PiAodjEuXzEsIFN5bWJvbCh2MS5fMi50b1N0cmluZykpKQo=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">ICAucmVkdWNlR3JvdXBzKChpLCBzKSA9PiAoaS5fMSwgaS5fMiArIHMuXzIpKQo=</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">aW1wb3J0IG9yZy5hcGFjaGUuc3BhcmsuSGFzaFBhcnRpdGlvbmVyCgp2YWwgc2MgPSBuZXcgU3BhcmtDb250ZXh0KCAuLi4gKQp2YWwgdXNlckRhdGEgPSBzYy5zZXF1ZW5jZUZpbGVbVXNlcklELCBVc2VybG5mb10oImhkZnM6Ly8gLi4uICIpCiAgLnBhcnRpdGlvbkJ5KG5ldyBIYXNoUGFydGl0aW9uZXIoMTAwKSkKICAucGVyc2lzdCgpCgpkZWYgcHJvY2Vzc05ld2xvZ3MobG9nRmlsZU5hbWU6IFN0cmluZykgewogIHZhbCBldmVudHMgPSBzYy5zZXF1ZW5jZUZpbGVbVXNlcklELCBMaW5rbG5mb10obG9nRmlsZU5hbWUpCiAgdmFsIGpvaW5lZCA9IHVzZXJEYXRhLmpvaW4oZXZlbnRzKSAvL1JPRCBvZiAoVXNlcklELCAoVXNlcmxuZm8sIExpbmtsbmZvKSkKICB2YWwgb2ZmVG9waWNWaXNpdHMgPSBqb2luZWQuZmlsdGVyIHsKICAgIGNhc2UgKHVzZXJsZCwgKHVzZXJsbmZvLCBsaW5rbG5mbykpID0+IC8vRXhwYW5kIHRoZSB0dXBsZQogICAgICAhdXNlcmxuZm8udG9waWNzLmNvbnRhaW5zKGxpbmtsbmZvLnRvcGljKQogIH0uY291bnQoKQogIHByaW50bG4oJydOdW1iZXIgb2YgdmlzaXRzIHRvIG5vbi1zdWJzY3JpYmVkIHRvcGljczogJycgKyBvZmZUb3BpY1Zpc2kgdHMpCn0K</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">aW1wb3J0IGphdmEubmlvLmZpbGUuUGF0aHMKCmltcG9ydCBvcmcuYXBhY2hlLnNwYXJrLnNxbC5fCmltcG9ydCBvcmcuYXBhY2hlLnNwYXJrLnNxbC50eXBlcy5fCgovKiogTWFpbiBjbGFzcyAqLwpvYmplY3QgVGltZVVzYWdlIHsKCiAgaW1wb3J0IG9yZy5hcGFjaGUuc3Bhcmsuc3FsLlNwYXJrU2Vzc2lvbgogIGltcG9ydCBvcmcuYXBhY2hlLnNwYXJrLnNxbC5mdW5jdGlvbnMuXwoKICB2YWwgc3Bhcms6IFNwYXJrU2Vzc2lvbiA9CiAgICBTcGFya1Nlc3Npb24KICAgICAgLmJ1aWxkZXIoKQogICAgICAuYXBwTmFtZSgiVGltZSBVc2FnZSIpCiAgICAgIC5jb25maWcoInNwYXJrLm1hc3RlciIsICJsb2NhbCIpCiAgICAgIC5nZXRPckNyZWF0ZSgpCgogIC8vIEZvciBpbXBsaWNpdCBjb252ZXJzaW9ucyBsaWtlIGNvbnZlcnRpbmcgUkREcyB0byBEYXRhRnJhbWVzCiAgaW1wb3J0IHNwYXJrLmltcGxpY2l0cy5fCgogIC8qKiBNYWluIGZ1bmN0aW9uICovCiAgZGVmIG1haW4oYXJnczogQXJyYXlbU3RyaW5nXSk6IFVuaXQgPSB7CiAgICB0aW1lVXNhZ2VCeUxpZmVQZXJpb2QoKQogIH0KCiAgZGVmIHRpbWVVc2FnZUJ5TGlmZVBlcmlvZCgpOiBVbml0ID0gewogICAgdmFsIChjb2x1bW5zLCBpbml0RGYpID0gcmVhZCgiL3RpbWV1c2FnZS9hdHVzc3VtLmNzdiIpCiAgICB2YWwgKHByaW1hcnlOZWVkc0NvbHVtbnMsIHdvcmtDb2x1bW5zLCBvdGhlckNvbHVtbnMpID0gY2xhc3NpZmllZENvbHVtbnMoY29sdW1ucykKICAgIHZhbCBzdW1tYXJ5RGYgPSB0aW1lVXNhZ2VTdW1tYXJ5KHByaW1hcnlOZWVkc0NvbHVtbnMsIHdvcmtDb2x1bW5zLCBvdGhlckNvbHVtbnMsIGluaXREZikKICAgIHZhbCBmaW5hbERmID0gdGltZVVzYWdlR3JvdXBlZChzdW1tYXJ5RGYpCiAgICBmaW5hbERmLnNob3coKQogIH0KCiAgLyoqIEByZXR1cm4gVGhlIHJlYWQgRGF0YUZyYW1lIGFsb25nIHdpdGggaXRzIGNvbHVtbiBuYW1lcy4gKi8KICBkZWYgcmVhZChyZXNvdXJjZTogU3RyaW5nKTogKExpc3RbU3RyaW5nXSwgRGF0YUZyYW1lKSA9IHsKICAgIHZhbCByZGQgPSBzcGFyay5zcGFya0NvbnRleHQudGV4dEZpbGUoZnNQYXRoKHJlc291cmNlKSkKCiAgICB2YWwgaGVhZGVyQ29sdW1ucyA9IHJkZC5maXJzdCgpLnNwbGl0KCIsIikudG9bTGlzdF0KICAgIC8vIENvbXB1dGUgdGhlIHNjaGVtYSBiYXNlZCBvbiB0aGUgZmlyc3QgbGluZSBvZiB0aGUgQ1NWIGZpbGUKICAgIHZhbCBzY2hlbWEgPSBkZlNjaGVtYShoZWFkZXJDb2x1bW5zKQoKICAgIHZhbCBkYXRhID0KICAgICAgcmRkCiAgICAgICAgLm1hcFBhcnRpdGlvbnNXaXRoSW5kZXgoKGksIGl0KSA9PiBpZiAoaSA9PSAwKSBpdC5kcm9wKDApIGVsc2UgaXQpIC8vIHNraXAgdGhlIGhlYWRlciBsaW5lCiAgICAgICAgLm1hcChfLnNwbGl0KCIsIikudG9bTGlzdF0pCiAgICAgICAgLm1hcChyb3cpCgogICAgdmFsIGRhdGFGcmFtZSA9CiAgICAgIHNwYXJrLmNyZWF0ZURhdGFGcmFtZShkYXRhLCBzY2hlbWEpCgogICAgKGhlYWRlckNvbHVtbnMsIGRhdGFGcmFtZSkKICB9CgogIC8qKiBAcmV0dXJuIFRoZSBmaWxlc3lzdGVtIHBhdGggb2YgdGhlIGdpdmVuIHJlc291cmNlICovCiAgZGVmIGZzUGF0aChyZXNvdXJjZTogU3RyaW5nKTogU3RyaW5nID0KICAgIFBhdGhzLmdldChnZXRDbGFzcy5nZXRSZXNvdXJjZShyZXNvdXJjZSkudG9VUkkpLnRvU3RyaW5nCgogIC8qKiBAcmV0dXJuIFRoZSBzY2hlbWEgb2YgdGhlIERhdGFGcmFtZSwgYXNzdW1pbmcgdGhhdCB0aGUgZmlyc3QgZ2l2ZW4gY29sdW1uIGhhcyB0eXBlIFN0cmluZyBhbmQgYWxsIHRoZSBvdGhlcnMKICAgICogICAgICAgICBoYXZlIHR5cGUgRG91YmxlLiBOb25lIG9mIHRoZSBmaWVsZHMgYXJlIG51bGxhYmxlLgogICAgKiBAcGFyYW0gY29sdW1uTmFtZXMgQ29sdW1uIG5hbWVzIG9mIHRoZSBEYXRhRnJhbWUKICAgICovCiAgZGVmIGRmU2NoZW1hKGNvbHVtbk5hbWVzOiBMaXN0W1N0cmluZ10pOiBTdHJ1Y3RUeXBlID0KICAgIFN0cnVjdFR5cGUoCiAgICAgIFN0cnVjdEZpZWxkKGNvbHVtbk5hbWVzLmhlYWQsIFN0cmluZ1R5cGUsIGZhbHNlKSA6OgogICAgICAgIGNvbHVtbk5hbWVzLm1hcChjb2x1bW4gPT4gU3RydWN0RmllbGQoY29sdW1uLCBEb3VibGVUeXBlLCBmYWxzZSkpCiAgICApCgogIC8qKiBAcmV0dXJuIEFuIFJERCBSb3cgY29tcGF0aWJsZSB3aXRoIHRoZSBzY2hlbWEgcHJvZHVjZWQgYnkgYGRmU2NoZW1hYAogICAgKiBAcGFyYW0gbGluZSBSYXcgZmllbGRzCiAgICAqLwogIGRlZiByb3cobGluZTogTGlzdFtTdHJpbmddKTogUm93ID0KICAgIFJvdyhsaW5lLmhlYWQudG9TdHJpbmcgOjogbGluZS50YWlsLm1hcChfLnRvRG91YmxlKSkKCiAgLyoqIEByZXR1cm4gVGhlIGluaXRpYWwgZGF0YSBmcmFtZSBjb2x1bW5zIHBhcnRpdGlvbmVkIGluIHRocmVlIGdyb3VwczogcHJpbWFyeSBuZWVkcyAoc2xlZXBpbmcsIGVhdGluZywgZXRjLiksCiAgICAqICAgICAgICAgd29yayBhbmQgb3RoZXIgKGxlaXN1cmUgYWN0aXZpdGllcykKICAgICogQHNlZSBodHRwczovL3d3dy5rYWdnbGUuY29tL2Jscy9hbWVyaWNhbi10aW1lLXVzZS1zdXJ2ZXkKICAgICoKICAgICogICAgICBUaGUgZGF0YXNldCBjb250YWlucyB0aGUgZGFpbHkgdGltZSAoaW4gbWludXRlcykgcGVvcGxlIHNwZW50IGluIHZhcmlvdXMgYWN0aXZpdGllcy4gRm9yIGluc3RhbmNlLCB0aGUgY29sdW1uCiAgICAqICAgICAg4oCcdDAxMDEwMeKAnSBjb250YWlucyB0aGUgdGltZSBzcGVudCBzbGVlcGluZywgdGhlIGNvbHVtbiDigJx0MTEwMTAx4oCdIGNvbnRhaW5zIHRoZSB0aW1lIHNwZW50IGVhdGluZyBhbmQgZHJpbmtpbmcsIGV0Yy4KICAgICoKICAgICogICAgICBUaGlzIG1ldGhvZCBncm91cHMgcmVsYXRlZCBjb2x1bW5zIHRvZ2V0aGVyOgogICAgKiAxLiDigJxwcmltYXJ5IG5lZWRz4oCdIGFjdGl2aXRpZXMgKHNsZWVwaW5nLCBlYXRpbmcsIGV0Yy4pLiBUaGVzZSBhcmUgdGhlIGNvbHVtbnMgc3RhcnRpbmcgd2l0aCDigJx0MDHigJ0sIOKAnHQwM+KAnSwg4oCcdDEx4oCdLAogICAgKiAgICAgIOKAnHQxODAx4oCdIGFuZCDigJx0MTgwM+KAnS4KICAgICogMi4gd29ya2luZyBhY3Rpdml0aWVzLiBUaGVzZSBhcmUgdGhlIGNvbHVtbnMgc3RhcnRpbmcgd2l0aCDigJx0MDXigJ0gYW5kIOKAnHQxODA14oCdLgogICAgKiAzLiBvdGhlciBhY3Rpdml0aWVzIChsZWlzdXJlKS4gVGhlc2UgYXJlIHRoZSBjb2x1bW5zIHN0YXJ0aW5nIHdpdGgg4oCcdDAy4oCdLCDigJx0MDTigJ0sIOKAnHQwNuKAnSwg4oCcdDA34oCdLCDigJx0MDjigJ0sIOKAnHQwOeKAnSwKICAgICogICAgICDigJx0MTDigJ0sIOKAnHQxMuKAnSwg4oCcdDEz4oCdLCDigJx0MTTigJ0sIOKAnHQxNeKAnSwg4oCcdDE24oCdIGFuZCDigJx0MTjigJ0gKHRob3NlIHdoaWNoIGFyZSBub3QgcGFydCBvZiB0aGUgcHJldmlvdXMgZ3JvdXBzIG9ubHkpLgogICAgKi8KICBkZWYgY2xhc3NpZmllZENvbHVtbnMoY29sdW1uTmFtZXM6IExpc3RbU3RyaW5nXSk6IChMaXN0W0NvbHVtbl0sIExpc3RbQ29sdW1uXSwgTGlzdFtDb2x1bW5dKSA9IHsKICAgIO+7vyB2YWwgY2F0ZWdvcnlNYXBwaW5ncyA9IExpc3QoCiAgICAgIExpc3QoInQwMSIsICJ0MDMiLCAidDExIiwgInQxODAxIiwgInQxODAzIiksCiAgICAgIExpc3QoInQwNSIsICJ0MTgwNSIpLAogICAgICBMaXN0KCJ0MDIiLCAidDA0IiwgInQwNiIsICJ0MDciLCAidDA4IiwgInQwOSIsICJ0MTAiLCAidDEyIiwgInQxMyIsICJ0MTQiLCAidDE1IiwgInQxNiIsICJ0MTgiKQogICAgKS56aXBXaXRoSW5kZXgKCiAgICB2YWwgZ3JvdXBzOiBNYXBbSW50LCBMaXN0W0NvbHVtbl1dID0gY29sdW1uTmFtZXMKICAgICAgLmZvbGRMZWZ0KExpc3QuZW1wdHlbKEludCwgQ29sdW1uKV0pKChhY2MsIGNvbHVtbikgPT4gewogICAgICAgIGNhdGVnb3J5TWFwcGluZ3MKICAgICAgICAgIC5mbGF0TWFwIHsKICAgICAgICAgICAgY2FzZSAocHJlZml4ZXMsIGluZGV4KSBpZiBwcmVmaXhlcy5zdGFydHNXaXRoKGNvbHVtbikgPT4KICAgICAgICAgICAgICBTb21lKChpbmRleCwgbmV3IENvbHVtbihjb2x1bW4pKSkKICAgICAgICAgICAgY2FzZSBfID0+IE5vbmUKICAgICAgICAgIH0KICAgICAgICAgIC5zb3J0QnkoXy5fMSkKICAgICAgICAgIC5oZWFkT3B0aW9uIG1hdGNoIHsKICAgICAgICAgIGNhc2UgU29tZSh0dXBsZSkgPT4gdHVwbGUgOjogYWNjCiAgICAgICAgICBjYXNlIE5vbmUgPT4gYWNjCiAgICAgICAgfQogICAgICB9KQogICAgICAuZ3JvdXBCeShfLl8xKQogICAgICAubWFwVmFsdWVzKF8ubWFwKF8uXzIpKQoKICAgIHZhbCByZXN1bHRzID0gKDAgdG8gMikKICAgICAgLm1hcChpbmRleCA9PiBncm91cHMuZ2V0T3JFbHNlKGluZGV4LCBMaXN0LmVtcHR5W0NvbHVtbl0pKQoKICAgIChyZXN1bHRzKDApLCByZXN1bHRzKDEpLCByZXN1bHRzKDIpKQogIH0KCiAgLyoqIEByZXR1cm4gYSBwcm9qZWN0aW9uIG9mIHRoZSBpbml0aWFsIERhdGFGcmFtZSBzdWNoIHRoYXQgYWxsIGNvbHVtbnMgY29udGFpbmluZyBob3VycyBzcGVudCBvbiBwcmltYXJ5IG5lZWRzCiAgICAqICAgICAgICAgYXJlIHN1bW1lZCB0b2dldGhlciBpbiBhIHNpbmdsZSBjb2x1bW4gKGFuZCBzYW1lIGZvciB3b3JrIGFuZCBsZWlzdXJlKS4gVGhlIOKAnHRlYWdl4oCdIGNvbHVtbiBpcyBhbHNvCiAgICAqICAgICAgICAgcHJvamVjdGVkIHRvIHRocmVlIHZhbHVlczogInlvdW5nIiwgImFjdGl2ZSIsICJlbGRlciIuCiAgICAqIEBwYXJhbSBwcmltYXJ5TmVlZHNDb2x1bW5zIExpc3Qgb2YgY29sdW1ucyBjb250YWluaW5nIHRpbWUgc3BlbnQgb24g4oCccHJpbWFyeSBuZWVkc+KAnQogICAgKiBAcGFyYW0gd29ya0NvbHVtbnMgICAgICAgICBMaXN0IG9mIGNvbHVtbnMgY29udGFpbmluZyB0aW1lIHNwZW50IHdvcmtpbmcKICAgICogQHBhcmFtIG90aGVyQ29sdW1ucyAgICAgICAgTGlzdCBvZiBjb2x1bW5zIGNvbnRhaW5pbmcgdGltZSBzcGVudCBkb2luZyBvdGhlciBhY3Rpdml0aWVzCiAgICAqIEBwYXJhbSBkZiAgICAgICAgICAgICAgICAgIERhdGFGcmFtZSB3aG9zZSBzY2hlbWEgbWF0Y2hlcyB0aGUgZ2l2ZW4gY29sdW1uIGxpc3RzCiAgICAqCiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgbWV0aG9kcyBidWlsZHMgYW4gaW50ZXJtZWRpYXRlIERhdGFGcmFtZSB0aGF0IHN1bXMgdXAgYWxsIHRoZSBjb2x1bW5zIG9mIGVhY2ggZ3JvdXAgb2YgYWN0aXZpdHkgaW50bwogICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHNpbmdsZSBjb2x1bW4uCiAgICAqCiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSByZXN1bHRpbmcgRGF0YUZyYW1lIHNob3VsZCBoYXZlIHRoZSBmb2xsb3dpbmcgY29sdW1uczoKICAgICogLSB3b3JraW5nOiB2YWx1ZSBjb21wdXRlZCBmcm9tIHRoZSDigJx0ZWxmc+KAnSBjb2x1bW4gb2YgdGhlIGdpdmVuIERhdGFGcmFtZToKICAgICogICAtICJ3b3JraW5nIiBpZiAxIDw9IHRlbGZzIDwgMwogICAgKiAgIC0gIm5vdCB3b3JraW5nIiBvdGhlcndpc2UKICAgICogLSBzZXg6IHZhbHVlIGNvbXB1dGVkIGZyb20gdGhlIOKAnHRlc2V44oCdIGNvbHVtbiBvZiB0aGUgZ2l2ZW4gRGF0YUZyYW1lOgogICAgKiAgIC0gIm1hbGUiIGlmIHRlc2V4ID0gMSwgImZlbWFsZSIgb3RoZXJ3aXNlCiAgICAqIC0gYWdlOiB2YWx1ZSBjb21wdXRlZCBmcm9tIHRoZSDigJx0ZWFnZeKAnSBjb2x1bW4gb2YgdGhlIGdpdmVuIERhdGFGcmFtZToKICAgICogICAtICJ5b3VuZyIgaWYgMTUgPD0gdGVhZ2UgPD0gMjIsCiAgICAqICAgLSAiYWN0aXZlIiBpZiAyMyA8PSB0ZWFnZSA8PSA1NSwKICAgICogICAtICJlbGRlciIgb3RoZXJ3aXNlCiAgICAqIC0gcHJpbWFyeU5lZWRzOiBzdW0gb2YgYWxsIHRoZSBgcHJpbWFyeU5lZWRzQ29sdW1uc2AsIGluIGhvdXJzCiAgICAqIC0gd29yazogc3VtIG9mIGFsbCB0aGUgYHdvcmtDb2x1bW5zYCwgaW4gaG91cnMKICAgICogLSBvdGhlcjogc3VtIG9mIGFsbCB0aGUgYG90aGVyQ29sdW1uc2AsIGluIGhvdXJzCiAgICAqCiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbmFsbHksIHRoZSByZXN1bHRpbmcgRGF0YUZyYW1lIHNob3VsZCBleGNsdWRlIHBlb3BsZSB0aGF0IGFyZSBub3QgZW1wbG95YWJsZSAoaWUgdGVsZnMgPSA1KS4KICAgICoKICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgTm90ZSB0aGF0IHRoZSBpbml0aWFsIERhdGFGcmFtZSBjb250YWlucyB0aW1lIGluICcnbWludXRlcycnLiBZb3UgaGF2ZSB0byBjb252ZXJ0IGl0IGludG8gJydob3VycycnLgogICAgKi8KICBkZWYgdGltZVVzYWdlU3VtbWFyeSgKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWFyeU5lZWRzQ29sdW1uczogTGlzdFtDb2x1bW5dLAogICAgICAgICAgICAgICAgICAgICAgICB3b3JrQ29sdW1uczogTGlzdFtDb2x1bW5dLAogICAgICAgICAgICAgICAgICAgICAgICBvdGhlckNvbHVtbnM6IExpc3RbQ29sdW1uXSwKICAgICAgICAgICAgICAgICAgICAgICAgZGY6IERhdGFGcmFtZQogICAgICAgICAgICAgICAgICAgICAgKTogRGF0YUZyYW1lID0gewogICAgLy8gVHJhbnNmb3JtIHRoZSBkYXRhIGZyb20gdGhlIGluaXRpYWwgZGF0YXNldCBpbnRvIGRhdGEgdGhhdCBtYWtlCiAgICAvLyBtb3JlIHNlbnNlIGZvciBvdXIgdXNlIGNhc2UKICAgIC8vIEhpbnQ6IHlvdSBjYW4gdXNlIHRoZSBgd2hlbmAgYW5kIGBvdGhlcndpc2VgIFNwYXJrIGZ1bmN0aW9ucwogICAgLy8gSGludDogZG9u4oCZdCBmb3JnZXQgdG8gZ2l2ZSB5b3VyIGNvbHVtbnMgdGhlIGV4cGVjdGVkIG5hbWUgd2l0aCB0aGUgYGFzYCBtZXRob2QKICAgIHZhbCB3b3JraW5nU3RhdHVzUHJvamVjdGlvbjogQ29sdW1uID0KICAgIHdoZW4oJ3RlbGZzIDwgMS4wLCAid29ya2luZyIpCiAgICAgIC5vdGhlcndpc2UoIm5vdCB3b3JraW5nIikKICAgICAgLmFzKCJ3b3JraW5nIikKICAgIHZhbCBzZXhQcm9qZWN0aW9uOiBDb2x1bW4gPQogICAgICB3aGVuKCd0ZXNleCA9PT0gMSwgIm1hbGUiKQogICAgICAgIC5vdGhlcndpc2UoInNleCIpCiAgICAgICAgLmFzKCJzZXgiKQogICAgdmFsIGFnZVByb2plY3Rpb246IENvbHVtbiA9CiAgICAgIHdoZW4oJ3RlYWdlLmJldHdlZW4oMTUsIDIyKSwgInlvdW5nIikKICAgICAgICAub3RoZXJ3aXNlKCJlbGRlciIpCiAgICAgICAgLmFzKCJhZ2UiKQoKICAgIC8vIENyZWF0ZSBjb2x1bW5zIHRoYXQgc3VtIGNvbHVtbnMgb2YgdGhlIGluaXRpYWwgZGF0YXNldAogICAgLy8gSGludDogeW91IHdhbnQgdG8gY3JlYXRlIGEgY29tcGxleCBjb2x1bW4gZXhwcmVzc2lvbiB0aGF0IHN1bXMgb3RoZXIgY29sdW1ucwogICAgLy8gICAgICAgYnkgdXNpbmcgdGhlIGArYCBvcGVyYXRvciBiZXR3ZWVuIHRoZW0KICAgIC8vIEhpbnQ6IGRvbuKAmXQgZm9yZ2V0IHRvIGNvbnZlcnQgdGhlIHZhbHVlIHRvIGhvdXJzCiAgICB2YWwgcHJpbWFyeU5lZWRzUHJvamVjdGlvbjogQ29sdW1uID0KICAgIHByaW1hcnlOZWVkc0NvbHVtbnMKICAgICAgLnJlZHVjZShfICsgXykKICAgICAgLmRpdmlkZSg2MCkKICAgICAgLmFzKCJwcmltYXJ5TmVlZHMiKQogICAgdmFsIHdvcmtQcm9qZWN0aW9uOiBDb2x1bW4gPSA/Pz8KICAgIHZhbCBvdGhlclByb2plY3Rpb246IENvbHVtbiA9ID8/PwogICAgZGYKICAgICAgLnNlbGVjdCh3b3JraW5nU3RhdHVzUHJvamVjdGlvbiwgc2V4UHJvamVjdGlvbiwgYWdlUHJvamVjdGlvbiwgcHJpbWFyeU5lZWRzUHJvamVjdGlvbiwgd29ya1Byb2plY3Rpb24sIG90aGVyUHJvamVjdGlvbikKICAgICAgLndoZXJlKCQidGVsZnMiIDw9IDQpIC8vIERpc2NhcmQgcGVvcGxlIHdobyBhcmUgbm90IGluIGxhYm9yIGZvcmNlCiAgfQoKICAvKiogQHJldHVybiB0aGUgYXZlcmFnZSBkYWlseSB0aW1lIChpbiBob3Vycykgc3BlbnQgaW4gcHJpbWFyeSBuZWVkcywgd29ya2luZyBvciBsZWlzdXJlLCBncm91cGVkIGJ5IHRoZSBkaWZmZXJlbnQKICAgICogICAgICAgICBhZ2VzIG9mIGxpZmUgKHlvdW5nLCBhY3RpdmUgb3IgZWxkZXIpLCBzZXggYW5kIHdvcmtpbmcgc3RhdHVzLgogICAgKiBAcGFyYW0gc3VtbWVkIERhdGFGcmFtZSByZXR1cm5lZCBieSBgdGltZVVzYWdlU3VtQnlDbGFzc2AKICAgICoKICAgICogICAgICAgICAgICAgICBUaGUgcmVzdWx0aW5nIERhdGFGcmFtZSBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIGNvbHVtbnM6CiAgICAqIC0gd29ya2luZzogdGhlIOKAnHdvcmtpbmfigJ0gY29sdW1uIG9mIHRoZSBgc3VtbWVkYCBEYXRhRnJhbWUsCiAgICAqIC0gc2V4OiB0aGUg4oCcc2V44oCdIGNvbHVtbiBvZiB0aGUgYHN1bW1lZGAgRGF0YUZyYW1lLAogICAgKiAtIGFnZTogdGhlIOKAnGFnZeKAnSBjb2x1bW4gb2YgdGhlIGBzdW1tZWRgIERhdGFGcmFtZSwKICAgICogLSBwcmltYXJ5TmVlZHM6IHRoZSBhdmVyYWdlIHZhbHVlIG9mIHRoZSDigJxwcmltYXJ5TmVlZHPigJ0gY29sdW1ucyBvZiBhbGwgdGhlIHBlb3BsZSB0aGF0IGhhdmUgdGhlIHNhbWUgd29ya2luZwogICAgKiAgICAgICAgICAgICAgIHN0YXR1cywgc2V4IGFuZCBhZ2UsIHJvdW5kZWQgd2l0aCBhIHNjYWxlIG9mIDEgKHVzaW5nIHRoZSBgcm91bmRgIGZ1bmN0aW9uKSwKICAgICogLSB3b3JrOiB0aGUgYXZlcmFnZSB2YWx1ZSBvZiB0aGUg4oCcd29ya+KAnSBjb2x1bW5zIG9mIGFsbCB0aGUgcGVvcGxlIHRoYXQgaGF2ZSB0aGUgc2FtZSB3b3JraW5nIHN0YXR1cywgc2V4CiAgICAqICAgICAgICAgICAgICAgYW5kIGFnZSwgcm91bmRlZCB3aXRoIGEgc2NhbGUgb2YgMSAodXNpbmcgdGhlIGByb3VuZGAgZnVuY3Rpb24pLAogICAgKiAtIG90aGVyOiB0aGUgYXZlcmFnZSB2YWx1ZSBvZiB0aGUg4oCcb3RoZXLigJ0gY29sdW1ucyBhbGwgdGhlIHBlb3BsZSB0aGF0IGhhdmUgdGhlIHNhbWUgd29ya2luZyBzdGF0dXMsIHNleCBhbmQKICAgICogICAgICAgICAgICAgICBhZ2UsIHJvdW5kZWQgd2l0aCBhIHNjYWxlIG9mIDEgKHVzaW5nIHRoZSBgcm91bmRgIGZ1bmN0aW9uKS4KICAgICoKICAgICogICAgICAgICAgICAgICBGaW5hbGx5LCB0aGUgcmVzdWx0aW5nIERhdGFGcmFtZSBzaG91bGQgYmUgc29ydGVkIGJ5IHdvcmtpbmcgc3RhdHVzLCBzZXggYW5kIGFnZS4KICAgICovCiAgZGVmIHRpbWVVc2FnZUdyb3VwZWQoc3VtbWVkOiBEYXRhRnJhbWUpOiBEYXRhRnJhbWUgPSB7CiAgICBzdW1tZWQKICAgICAgLmdyb3VwQnkoJ3dvcmtpbmcsICdzZXgsICdhZ2UpCiAgICAgIC5hZ2coCiAgICAgICAgcm91bmQoYXZnKCdwcmltYXJ5TmVlZHMpLCAxKQogICAgICApCiAgICAgIC5vcmRlckJ5KCd3b3JraW5nLCAnc2V4LCAnYWdlKQogIH0KCiAgLyoqCiAgICAqIEByZXR1cm4gU2FtZSBhcyBgdGltZVVzYWdlR3JvdXBlZGAsIGJ1dCB1c2luZyBhIHBsYWluIFNRTCBxdWVyeSBpbnN0ZWFkCiAgICAqIEBwYXJhbSBzdW1tZWQgRGF0YUZyYW1lIHJldHVybmVkIGJ5IGB0aW1lVXNhZ2VTdW1CeUNsYXNzYAogICAgKi8KICBkZWYgdGltZVVzYWdlR3JvdXBlZFNxbChzdW1tZWQ6IERhdGFGcmFtZSk6IERhdGFGcmFtZSA9IHsKICAgIHZhbCB2aWV3TmFtZSA9IHMic3VtbWVkIgogICAgc3VtbWVkLmNyZWF0ZU9yUmVwbGFjZVRlbXBWaWV3KHZpZXdOYW1lKQogICAgc3Bhcmsuc3FsKHRpbWVVc2FnZUdyb3VwZWRTcWxRdWVyeSh2aWV3TmFtZSkpCiAgfQoKICAvKiogQHJldHVybiBTUUwgcXVlcnkgZXF1aXZhbGVudCB0byB0aGUgdHJhbnNmb3JtYXRpb24gaW1wbGVtZW50ZWQgaW4gYHRpbWVVc2FnZUdyb3VwZWRgCiAgICAqIEBwYXJhbSB2aWV3TmFtZSBOYW1lIG9mIHRoZSBTUUwgdmlldyB0byB1c2UKICAgICovCiAgZGVmIHRpbWVVc2FnZUdyb3VwZWRTcWxRdWVyeSh2aWV3TmFtZTogU3RyaW5nKTogU3RyaW5nID0KICAgIHMic2VsZWN0ICogZnJvbSAkdmlld05hbWUiCgogIC8qKgogICAgKiBAcmV0dXJuIEEgYERhdGFzZXRbVGltZVVzYWdlUm93XWAgZnJvbSB0aGUg4oCcdW50eXBlZOKAnSBgRGF0YUZyYW1lYAogICAgKiBAcGFyYW0gdGltZVVzYWdlU3VtbWFyeURmIGBEYXRhRnJhbWVgIHJldHVybmVkIGJ5IHRoZSBgdGltZVVzYWdlU3VtbWFyeWAgbWV0aG9kCiAgICAqCiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgSGludDogeW91IHNob3VsZCB1c2UgdGhlIGBnZXRBc2AgbWV0aG9kIG9mIGBSb3dgIHRvIGxvb2sgdXAgY29sdW1ucyBhbmQKICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBjYXN0IHRoZW0gYXQgdGhlIHNhbWUgdGltZS4KICAgICovCiAgZGVmIHRpbWVVc2FnZVN1bW1hcnlUeXBlZCh0aW1lVXNhZ2VTdW1tYXJ5RGY6IERhdGFGcmFtZSk6IERhdGFzZXRbVGltZVVzYWdlUm93XSA9CiAgICB0aW1lVXNhZ2VTdW1tYXJ5RGYuYXNbVGltZVVzYWdlUm93XQoKICAvKioKICAgICogQHJldHVybiBTYW1lIGFzIGB0aW1lVXNhZ2VHcm91cGVkYCwgYnV0IHVzaW5nIHRoZSB0eXBlZCBBUEkgd2hlbiBwb3NzaWJsZQogICAgKiBAcGFyYW0gc3VtbWVkIERhdGFzZXQgcmV0dXJuZWQgYnkgdGhlIGB0aW1lVXNhZ2VTdW1tYXJ5VHlwZWRgIG1ldGhvZAogICAgKgogICAgKiAgICAgICAgICAgICAgIE5vdGUgdGhhdCwgdGhvdWdoIHRoZXkgaGF2ZSB0aGUgc2FtZSB0eXBlIChgRGF0YXNldFtUaW1lVXNhZ2VSb3ddYCksIHRoZSBpbnB1dAogICAgKiAgICAgICAgICAgICAgIGRhdGFzZXQgY29udGFpbnMgb25lIGVsZW1lbnQgcGVyIHJlc3BvbmRlbnQsIHdoZXJlYXMgdGhlIHJlc3VsdGluZyBkYXRhc2V0CiAgICAqICAgICAgICAgICAgICAgY29udGFpbnMgb25lIGVsZW1lbnQgcGVyIGdyb3VwICh3aG9zZSB0aW1lIHNwZW50IG9uIGVhY2ggYWN0aXZpdHkga2luZCBoYXMKICAgICogICAgICAgICAgICAgICBiZWVuIGFnZ3JlZ2F0ZWQpLgogICAgKgogICAgKiAgICAgICAgICAgICAgIEhpbnQ6IHlvdSBzaG91bGQgdXNlIHRoZSBgZ3JvdXBCeUtleWAgYW5kIGB0eXBlZC5hdmdgIG1ldGhvZHMuCiAgICAqLwogIGRlZiB0aW1lVXNhZ2VHcm91cGVkVHlwZWQoc3VtbWVkOiBEYXRhc2V0W1RpbWVVc2FnZVJvd10pOiBEYXRhc2V0W1RpbWVVc2FnZVJvd10gPSB7CiAgICBpbXBvcnQgb3JnLmFwYWNoZS5zcGFyay5zcWwuZXhwcmVzc2lvbnMuc2NhbGFsYW5nLnR5cGVkLmF2ZwoKICAgIGRlZiByb3VuZDEoZDogRG91YmxlKTogRG91YmxlID0gKGQgKiAxMCkucm91bmQgLyAxMGQKCiAgICBzdW1tZWQKICAgICAgLmdyb3VwQnlLZXkociA9PiAoci53b3JraW5nLCByLnNleCwgci5hZ2UpKQogICAgICAuYWdnKAogICAgICAgIGF2ZyhfLnByaW1hcnlOZWVkcykKICAgICAgKQogICAgCiAgICBzdW1tZWQKICAgICAgLmZsYXRNYXAge30KICB9Cn0KCi8qKgogICogTW9kZWxzIGEgcm93IG9mIHRoZSBzdW1tYXJpemVkIGRhdGEgc2V0CiAgKgogICogQHBhcmFtIHdvcmtpbmcgICAgICBXb3JraW5nIHN0YXR1cyAoZWl0aGVyICJ3b3JraW5nIiBvciAibm90IHdvcmtpbmciKQogICogQHBhcmFtIHNleCAgICAgICAgICBTZXggKGVpdGhlciAibWFsZSIgb3IgImZlbWFsZSIpCiAgKiBAcGFyYW0gYWdlICAgICAgICAgIEFnZSAoZWl0aGVyICJ5b3VuZyIsICJhY3RpdmUiIG9yICJlbGRlciIpCiAgKiBAcGFyYW0gcHJpbWFyeU5lZWRzIE51bWJlciBvZiBkYWlseSBob3VycyBzcGVudCBvbiBwcmltYXJ5IG5lZWRzCiAgKiBAcGFyYW0gd29yayAgICAgICAgIE51bWJlciBvZiBkYWlseSBob3VycyBzcGVudCBvbiB3b3JrCiAgKiBAcGFyYW0gb3RoZXIgICAgICAgIE51bWJlciBvZiBkYWlseSBob3VycyBzcGVudCBvbiBvdGhlciBhY3Rpdml0aWVzCiAgKi8KY2FzZSBjbGFzcyBUaW1lVXNhZ2VSb3coCiAgICAgICAgICAgICAgICAgICAgICAgICB3b3JraW5nOiBTdHJpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgICBzZXg6IFN0cmluZywKICAgICAgICAgICAgICAgICAgICAgICAgIGFnZTogU3RyaW5nLAogICAgICAgICAgICAgICAgICAgICAgICAgcHJpbWFyeU5lZWRzOiBEb3VibGUsCiAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrOiBEb3VibGUsCiAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcjogRG91YmxlCiAgICAgICAgICAgICAgICAgICAgICAgKQo=</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">ICAgIAo=</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">ICAgIHN1bW1lZAogICAgICAuZmxhdE1hcCB7CiAgICAgICAgY2FzZSAoKQogICAgICB9Cg==</text>
      </register>
      <register name=":" type="4">
        <text>%d</text>
      </register>
    </registers>
    <search>
      <last-search encoding="base64">XDxwZW9wbGVERjFcPg==</last-search>
      <last-offset />
      <last-pattern encoding="base64">XDxwZW9wbGVERjFcPg==</last-pattern>
      <last-replace />
      <last-substitute encoding="base64">c2NhbGE+</last-substitute>
      <last-dir>1</last-dir>
      <show-last>true</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">c2NhbGE+</entry>
        <entry encoding="base64">XDxzdHJcPg==</entry>
        <entry encoding="base64">XDxwZW9wbGVERjFcPg==</entry>
      </history-search>
      <history-cmd>
        <entry>w</entry>
        <entry encoding="base64">JXMvc2NhbGE+Ly9n</entry>
        <entry>%d</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>